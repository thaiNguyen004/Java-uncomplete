Mô hình luồng (thread) của Java - Java thread model
Hệ thống chạy Java phụ thuộc vào luồng cho nhiều thứ, và tất cả các thư viện lớp được thiết kế 
với đa luồng trong đầu. Trong thực tế, Java sử dụng luồng để cho phép toàn bộ môi trường là 
không đồng bộ. Điều này giúp giảm thiểu sự không hiệu quả bằng cách ngăn không lãng phí chu kỳ CPU.
Giá trị của môi trường đa luồng được hiểu rõ nhất khi so sánh với mô hình đơn luồng. 
Hệ thống đơn luồng sử dụng phương pháp gọi là vòng lặp sự kiện với đánh giá kiểm tra. 
Trong mô hình này, một luồng điều khiển duy nhất chạy trong một vòng lặp vô hạn, 
đánh giá kiểm tra hàng đợi sự kiện duy nhất để quyết định điều gì tiếp theo. 
Khi cơ chế đánh giá kiểm tra này trả về, ví dụ như một tín hiệu cho biết một tập tin 
mạng sẵn sàng để đọc, thì vòng lặp sự kiện sẽ chuyển quyền điều khiển cho bộ xử lý sự kiện thích hợp. 
Cho đến khi bộ xử lý sự kiện này trả về, không gì khác có thể xảy ra trong chương trình. 
Điều này lãng phí thời gian của CPU. Nó cũng có thể dẫn đến một phần của chương trình chiếm 
ưu thế trên hệ thống và ngăn cản bất kỳ sự kiện nào khác được xử lý. 
Nói chung, trong một môi trường đơn luồng, khi một luồng bị chặn (tức là tạm dừng thực thi) 
vì đang chờ đợi một tài nguyên nào đó, toàn bộ chương trình đều ngừng chạy.

Dịch: Lợi ích của đa luồng trong Java là loại bỏ cơ chế vòng lặp/điều khiển chờ đợi 
chính. Một luồng có thể tạm dừng mà không ngừng lại các phần khác của chương trình. 
Ví dụ, thời gian rảnh khi một luồng đọc dữ liệu từ mạng hoặc chờ đợi đầu vào từ 
người dùng có thể được sử dụng ở nơi khác. Đa luồng cho phép các vòng lặp hoạt hình tạm ngưng 
mỗi khung hình trong một giây mà không gây ra sự ngưng trệ của toàn bộ hệ thống. 
Khi một luồng bị chặn trong một chương trình Java, chỉ có luồng đó dừng lại. 
Tất cả các luồng khác vẫn tiếp tục chạy.

Như hầu hết các độc giả biết, trong những năm gần đây, các hệ thống đa nhân đã trở nên phổ biến. 
Tất nhiên, các hệ thống đơn nhân vẫn đang được sử dụng rộng rãi. Quan trọng là 
hiểu rằng tính năng đa luồng của Java hoạt động trên cả hai loại hệ thống này. 
Trong hệ thống đơn nhân, các luồng được thực thi đồng thời chia sẻ CPU, 
với mỗi luồng nhận được một đoạn thời gian của CPU. Do đó, trong hệ thống đơn nhân, 
hai hoặc nhiều luồng không chạy đồng thời, nhưng thời gian CPU không hoạt động được sử dụng. 
Tuy nhiên, trong các hệ thống đa nhân, có thể có hai hoặc nhiều luồng thực sự thực thi đồng thời. 
Trong nhiều trường hợp, điều này có thể cải thiện hiệu suất chương trình và tăng tốc độ của một số hoạt động.

GHI CHÚ: Ngoài những tính năng đa luồng được mô tả trong chương này, bạn cũng cần khám phá Framework Fork/Join. 
Nó cung cấp một phương tiện mạnh mẽ để tạo ứng dụng đa luồng tự động tự điều chỉnh để tận dụng tốt nhất môi trường đa nhân. 
Framework Fork/Join là một phần của hỗ trợ của Java cho lập trình song song, là tên thường được đưa ra cho các kỹ thuật 
tối ưu hóa một số loại thuật toán cho thực thi song song trong các hệ thống có nhiều hơn một CPU. 
Để biết thêm thông tin về Framework Fork/Join và các tiện ích đồng thời khác, xem Chương 28. 

Các khả năng đa luồng truyền thống của Java được mô tả ở đây.
Các luồng tồn tại trong một số trạng thái khác nhau. Đây là mô tả tổng quan. Một luồng có thể đang chạy. 
Nó có thể sẵn sàng để chạy ngay khi nó nhận được thời gian CPU. 
Một luồng đang chạy có thể bị tạm dừng, tạm ngưng hoạt động của nó. 
Một luồng đã tạm ngưng có thể được tiếp tục, cho phép nó tiếp tục từ điểm nó dừng lại trước đó. 
Một luồng có thể bị khóa khi đang chờ tài nguyên. Bất kỳ lúc nào, một luồng có thể bị kết thúc, 
đồng nghĩa với việc ngưng thực thi ngay lập tức. Sau khi bị kết thúc, một luồng không thể được tiếp tục.
