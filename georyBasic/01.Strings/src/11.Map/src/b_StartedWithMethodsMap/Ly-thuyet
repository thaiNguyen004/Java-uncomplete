Map là một interface trong Java Collections Framework, được sử dụng để lưu trữ các cặp key-value. 
Trong một Map, mỗi key đều là duy nhất và được sử dụng để truy cập đến giá trị tương ứng với key đó. 
Các giá trị có thể được truy cập thông qua các key tương ứng của chúng.

Map không cho phép có key trùng lặp, nếu một key được thêm vào một Map đã có sẵn và key đó đã tồn tại, 
thì giá trị của key đó sẽ được cập nhật với giá trị mới.

Vì Map là một interface nên bắt buộc phải sử dụng các lớp triển khai của Map để khởi tạo một
đối tượng Map. Map là một kiểu dữ liệu chung và được khai báo như sau:

    interface Map<K, V>

• Ở đây, K chỉ định kiểu của các key và V chỉ định kiểu của các value.
Các phương thức được khai báo bởi Map được tóm tắt trong Bảng 1. 
• Một số phương thức sẽ ném ra ngoại lệ ClassCastException khi một đối tượng không 
tương thích với các phần tử trong map. 
• Một ngoại lệ NullPointerException sẽ được ném ra nếu có một nỗ lực để sử dụng một 
đối tượng null và null không được phép trong map.
• Một ngoại lệ UnsupportedOperationException sẽ được ném ra khi có một nỗ lực để thay đổi 
một map không thể sửa đổi. 
• Một ngoại lệ IllegalArgumentException sẽ được ném ra nếu có một đối số không hợp lệ được sử dụng.


Các phương thức của Map: 
a, int size()
b, boolean isEmpty()
c, boolean containsKey(Object key)
d, boolean containsValue(Object value)
e, V get(Object key)
f, V put(K key, V value)
g, V remove(Object key)
h, void putAll(Map<? extends K, ? extends V> m)
i, void clear() /
k, Set<K> keySet()
l, Collection<V> values()
m, Set<Map.Entry<K, V>> entrySet()
n, default V getOrDefault(Object key, V defaultValue)
o, default void forEach(BiConsumer<? super K, ? super V> action)
p, default void replaceAll(BiFunction<? super K, ? super V, ? extends V> function)
q, default V putIfAbsent(K key, V value)
r, default boolean remove(Object key, Object value)
s, default boolean replace(K key, V oldValue, V newValue)
t, default V replace(K key, V value)
u, default V computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction)
v, default V computeIfPresent(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)
x, default V compute(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)
y, default V merge(K key, V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction)
z, default void clear()
