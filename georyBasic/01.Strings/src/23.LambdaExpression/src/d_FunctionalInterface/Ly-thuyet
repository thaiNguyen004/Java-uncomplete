Giao diện chức năng (Functional Interfaces)
• Như đã nêu, một giao diện chức năng là một giao diện chỉ định duy nhất một 
phương thức trừu tượng. Nếu bạn đã lập trình trong Java trong một thời gian, 
ban đầu bạn có thể nghĩ rằng tất cả các phương thức giao diện đều được ngầm định 
là trừu tượng. Mặc dù điều này đúng trước JDK 8, tình hình đã thay đổi. 
• Như đã giải thích trong Chương 9, bắt đầu từ JDK 8, bạn có thể chỉ định một 
triển khai mặc định cho một phương thức được khai báo trong một giao diện. 
Các phương thức giao diện riêng tư và tĩnh cũng cung cấp một triển khai. 
Do đó, hiện nay, một phương thức giao diện chỉ định là trừu tượng chỉ khi nó không xác định 
một triển khai. Vì các phương thức giao diện không tĩnh, không riêng tư và không mặc định 
là ngầm định là trừu tượng, không cần sử dụng từ khóa abstract 
(tuy nhiên bạn có thể chỉ định nó nếu muốn).

Dưới đây là một ví dụ về một giao diện chức năng: 
	
	interface MyNumber {
		double getValue();
	}

Trong trường hợp này, phương thức getValue() được ngầm định là trừu tượng và 
nó là duy nhất phương thức được định nghĩa bởi MyNumber. 
Do đó, MyNumber là một giao diện chức năng và chức năng của nó được định nghĩa bởi getValue().

Như đã đề cập trước đó, một biểu thức lambda không được thực thi một mình. 
Thay vào đó, nó được sử dụng để thực hiện phương thức trừu tượng được 
định nghĩa bởi giao diện chức năng xác định kiểu mục tiêu của nó. 
Kết quả là, một biểu thức lambda chỉ có thể được chỉ định trong ngữ cảnh mà một 
kiểu mục tiêu được định nghĩa. Một trong những ngữ cảnh này được tạo ra khi một 
biểu thức lambda được gán cho một tham chiếu của giao diện chức năng. 
Các ngữ cảnh kiểu mục tiêu khác bao gồm khởi tạo biến, câu lệnh return và đối số phương thức, 
để kể một vài ví dụ.

Hãy xem xét một ví dụ để minh họa cách một biểu thức lambda có thể được sử dụng trong ngữ cảnh gán. 
Trước tiên, một tham chiếu đến giao diện chức năng MyNumber được khai báo:

// Tạo một tham chiếu đến một phiên bản của MyNumber.
	
	MyNumber myNum;

Tiếp theo, một biểu thức lambda được gán cho tham chiếu giao diện đó:

// Sử dụng một biểu thức lambda trong ngữ cảnh gán.	
	myNum = () -> 123.45;
	
Khi một biểu thức lambda xuất hiện trong ngữ cảnh kiểu mục tiêu, một phiên bản 
của một lớp được tự động tạo ra để triển khai giao diện chức năng, 
trong đó biểu thức lambda xác định hành vi của phương thức trừu tượng được 
khai báo bởi giao diện chức năng. Khi phương thức đó được gọi thông qua mục tiêu, 
biểu thức lambda được thực thi. Do đó, biểu thức lambda cho chúng ta một cách để biến một 
đoạn mã thành một đối tượng.

Trong ví dụ trước đó, biểu thức lambda trở thành việc triển khai cho phương thức getValue(). 
Kết quả là, đoạn mã sau hiển thị giá trị 123.45:

// Gọi getValue(), mà được triển khai bởi biểu thức lambda đã gán trước đó.

System.out.println(myNum.getValue());

Vì biểu thức lambda gán cho myNum trả về giá trị 123.45, đó là giá trị thu được khi 
getValue() được gọi.

Để sử dụng một biểu thức lambda trong ngữ cảnh kiểu mục tiêu, kiểu của phương thức 
trừu tượng và kiểu của biểu thức lambda phải tương thích. 
Ví dụ, nếu phương thức trừu tượng xác định hai tham số kiểu int, 
thì biểu thức lambda phải xác định hai tham số có kiểu int được chỉ định rõ hoặc 
có thể được suy ra ngầm là kiểu int bởi ngữ cảnh. Nói chung, kiểu và số lượng tham số 
của biểu thức lambda phải tương thích với các tham số của phương thức; 
kiểu trả về phải tương thích; và bất kỳ ngoại lệ nào được ném bởi biểu thức lambda 
phải được chấp nhận bởi phương thức.

• Một vài ví dụ về Lambda Expression : example.java