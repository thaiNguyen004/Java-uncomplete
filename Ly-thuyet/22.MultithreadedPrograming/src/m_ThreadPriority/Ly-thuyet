Mức độ ưu tiên của các thread được sử dụng bởi lập lịch thread để quyết định khi nào 
mỗi thread được phép chạy. Lý thuyết, trong một khoảng thời gian nhất định, 
các thread ưu tiên cao nhận được nhiều thời gian CPU hơn các thread ưu tiên thấp hơn. 
Trong thực tế, lượng thời gian CPU mà một thread nhận được thường phụ thuộc vào 
nhiều yếu tố khác ngoài mức độ ưu tiên của nó. 
Ví dụ, cách mà hệ điều hành thực hiện đa nhiệm có thể ảnh hưởng đến sự có sẵn tương đối 
của thời gian CPU. Một thread ưu tiên cao cũng có thể đánh giá cao một thread ưu tiên thấp hơn. 
Ví dụ, khi một thread ưu tiên thấp đang chạy và một thread ưu tiên cao tiếp tục 
(từ trạng thái sleep hoặc đợi trên I/O), nó sẽ đánh giá cao thread ưu tiên thấp hơn.

Lý thuyết, các thread cùng mức độ ưu tiên nên có truy cập bình đẳng vào CPU. 
Tuy nhiên, bạn cần phải cẩn thận. Hãy nhớ rằng Java được thiết kế để hoạt động 
trong một loạt môi trường rộng. Một số trong số các môi trường đó thực hiện đa nhiệm 
một cách khác biệt về cơ bản so với các môi trường khác. Vì lý do an toàn, các thread 
chia sẻ cùng mức độ ưu tiên nên nhường quyền kiểm soát định kỳ. Điều này đảm bảo 
rằng tất cả các thread đều có cơ hội chạy dưới một hệ điều hành không preemptive. 
Trong thực tế, ngay cả trong môi trường không preemptive, hầu hết các thread vẫn có cơ hội chạy, 
vì hầu hết các thread sẽ gặp phải một số tình huống blocking, chẳng hạn như đợi I/O. 
Khi điều này xảy ra, thread bị blocked sẽ bị đình chỉ và các thread khác có thể chạy. 

Tuy nhiên, nếu bạn muốn thực thi đa luồng mượt mà, bạn tốt hơn là không phụ thuộc vào điều này. 
Ngoài ra, một số loại nhiệm vụ là yêu cầu tài nguyên CPU

Để đặt độ ưu tiên cho một luồng (thread), bạn sử dụng phương thức `setPriority()` 
là thành viên của lớp Thread. Đây là dạng chung của phương thức:

final void setPriority(int level)

Ở đây, level chỉ định mức độ ưu tiên mới cho luồng gọi phương thức này. 
Giá trị của level phải nằm trong khoảng MIN_PRIORITY và MAX_PRIORITY. 
Hiện tại, các giá trị này lần lượt là 1 và 10. Để trả lại độ ưu tiên mặc định cho một luồng, 
chỉ định NORM_PRIORITY, hiện tại là 5. 
Các mức độ ưu tiên này được định nghĩa là các biến tĩnh final trong lớp Thread.

Bạn có thể lấy mức độ ưu tiên hiện tại bằng cách gọi phương thức `getPriority()` 
của Thread, được hiển thị như sau:

final int getPriority()

Các triển khai (implementations) của Java có thể có cách thức lập lịch (scheduling) khác nhau, 
tức là có thể xử lý việc lập lịch các luồng (threads) theo cách khác nhau. 
Điều này có thể gây ra những bất đồng nhất về lập lịch giữa các triển khai khác nhau.

Đoạn văn tiếp tục đề cập đến việc hầu hết các không nhất quán (inconsistencies) 
phát sinh khi bạn có các luồng đang dựa vào hành vi chủ động chiếm CPU, 
thay vì hợp tác để nhường thời gian CPU. Điều này có nghĩa là khi các luồng đang hoạt động, 
nếu các luồng đó cố gắng chiếm CPU và không tự nguyện nhường quyền kiểm soát CPU 
cho các luồng khác, thì điều này có thể gây ra bất đồng nhất về việc lập lịch các luồng.

Để đạt được hành vi dự đoán, đa nền tảng với Java, cách an toàn nhất là sử dụng 
các luồng tự nguyện nhường quyền kiểm soát CPU. Tức là, các luồng phải hợp tác với nhau 
để nhường thời gian CPU cho các luồng khác, thay vì cố gắng chiếm CPU một cách chủ động. 
Việc này giúp đảm bảo rằng các luồng sẽ được lập lịch một cách dự đoán và đồng nhất trên các nền tảng khác nhau.