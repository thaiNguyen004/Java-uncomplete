Thread Priorities (Mức ưu tiên luồng)
Trong Java, mỗi luồng sẽ được gán một mức ưu tiên để quyết định cách xử lý luồng 
đó so với các luồng khác. Mức ưu tiên của mỗi luồng được xác định bởi một số nguyên, 
thể hiện mức độ ưu tiên tương đối so với các luồng khác. Mức ưu tiên của một luồng 
không mang ý nghĩa tuyệt đối, luồng có mức ưu tiên cao hơn không chạy nhanh hơn 
luồng có mức ưu tiên thấp hơn nếu chỉ có một luồng đang chạy. Thay vào đó, mức ưu tiên 
của một luồng được sử dụng để quyết định khi nào chuyển đổi từ luồng đang chạy 
hiện tại sang luồng khác, gọi là chuyển ngữ cảnh (context switch). 
Quy tắc quyết định khi nào thực hiện chuyển ngữ cảnh là đơn giản: 

- Luồng có mức ưu tiên cao hơn sẽ được thực thi trước luồng có mức ưu tiên thấp hơn.
- Nếu có nhiều luồng có cùng mức ưu tiên, Java sẽ chọn một luồng bất kỳ để thực thi trước.
- Java không đảm bảo thứ tự thực thi của các luồng cùng mức ưu tiên.

Tuy nhiên, việc sử dụng mức ưu tiên cần cẩn thận và không nên dựa hoàn toàn vào 
mức ưu tiên để điều khiển các luồng trong chương trình của bạn.

• Một luồng có thể tự nguyện nhường quyền kiểm soát. Điều này xảy ra khi luồng đó 
gọi hàm yield(), sleep() hoặc bị chặn. Trong tình huống này, tất cả các luồng khác 
được kiểm tra, và luồng có độ ưu tiên cao nhất mà sẵn sàng để chạy sẽ được cấp CPU.

• Một luồng có thể bị gián đoạn bởi một luồng có độ ưu tiên cao hơn. 
Trong trường hợp này, một luồng có độ ưu tiên thấp hơn mà không nhường bộ xử lý 
sẽ đơn giản bị gián đoạn - bất kể nó đang làm gì - bởi một luồng có độ ưu tiên cao hơn. 
Về cơ bản, ngay khi một luồng có độ ưu tiên cao hơn muốn chạy, nó sẽ được chạy ngay lập tức. 
Điều này được gọi là đa nhiệm gián đoạn (preemptive multitasking).

Trong các trường hợp mà hai luồng với cùng một mức độ ưu tiên đang cạnh tranh cho chu kỳ CPU, 
tình huống sẽ hơi phức tạp. Đối với một số hệ điều hành, các luồng có cùng mức độ ưu tiên 
được tự động thực hiện time-slice theo kiểu round-robin. Đối với các loại hệ điều hành khác, 
các luồng cùng mức độ ưu tiên phải tự nguyện nhường quyền kiểm soát cho các đồng nghiệp của mình. 
Nếu không, các luồng khác sẽ không được chạy.

CHÚ Ý: Những vấn đề về tính di động có thể phát sinh từ sự khác biệt trong cách mà các hệ điều hành 
chuyển đổi ngữ cảnh giữa các luồng có cùng mức độ ưu tiên.