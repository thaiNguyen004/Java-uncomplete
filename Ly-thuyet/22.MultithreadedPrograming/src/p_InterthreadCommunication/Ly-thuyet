Các ví dụ trước đã chặn các luồng khác không đồng bộ khỏi truy cập một số phương thức 
một cách không điều kiện. Sử dụng các monitor ngầm định trong các đối tượng Java là một cách 
mạnh mẽ, tuy nhiên, bạn có thể đạt được một mức độ kiểm soát tinh vi hơn thông qua giao tiếp 
giữa các tiến trình. Như bạn sẽ thấy, điều này đặc biệt dễ dàng trong Java.

Như đã thảo luận trước đó, đa luồng thay thế lập trình vòng lặp sự kiện bằng cách 
chia các tác vụ của bạn thành các đơn vị logic rõ ràng. Luồng cũng cung cấp một lợi ích phụ: 
chúng loại bỏ việc đánh giá liên tục. Đánh giá liên tục thường được thực hiện bằng một vòng lặp 
được sử dụng để kiểm tra một số điều kiện liên tục.
Khi điều kiện trở thành đúng, hành động thích hợp được thực hiện. Điều này lãng phí thời gian CPU. 
Ví dụ, hãy xem xét vấn đề hàng đợi kinh điển, trong đó một luồng đang 
sản xuất một số dữ liệu và luồng khác đang tiêu thụ chúng. 

Để làm cho vấn đề thêm thú vị, giả sử rằng nhà sản xuất phải chờ đợi cho đến khi người tiêu thụ 
tiêu thụ trước khi nxh tạo ra thêm dữ liệu. Trong một hệ thống đánh giá liên tục, người tiêu thụ sẽ 
lãng phí rất nhiều chu kỳ CPU trong khi đợi nhà sản xuất sản xuất. Khi nhà sản xuất hoàn thành, 
nó sẽ bắt đầu đánh giá liên tục, lãng phí thêm chu kỳ CPU đợi đến khi người tiêu thụ hoàn thành 
và tiếp tục đánh giá liên tục, lãng phí thêm chu kỳ CPU đợi đến khi người tiêu thụ hoàn thành, 
và cứ thế. Rõ ràng, tình huống này là không mong muốn.

Để tránh việc polling, Java cung cấp một cơ chế truyền thông giữa các tiến trình thông qua các phương thức 
wait (), notify () và notifyAll (). 
Các phương thức này được triển khai dưới dạng các phương thức final trong Object, do đó tất cả các lớp 
đều có chúng. Cả ba phương thức chỉ có thể được gọi từ một ngữ cảnh đồng bộ hóa. 

Trong Java, khi nhiều luồng cùng truy cập vào một tài nguyên có thể dẫn đến các lỗi đồng bộ hóa, 
ví dụ như deadlock hoặc race condition. Để tránh những lỗi này, Java cung cấp khả năng đồng bộ 
hóa luồng thông qua các khối lệnh đồng bộ hóa, cho phép chỉ một luồng có thể truy cập vào 
một đối tượng tài nguyên cùng một lúc. 

Trong trường hợp sử dụng các phương thức wait(), notify() và notifyAll(), chúng được thực 
hiện như các phương thức cuối cùng trong lớp Object của Java. Do đó, để sử dụng các phương thức này, 
chúng ta cần đảm bảo rằng chúng ta đã đồng bộ hóa đối tượng tài nguyên trước khi gọi chúng. 
Điều này đảm bảo rằng chỉ có một luồng truy cập vào tài nguyên tại một thời điểm và tránh được các lỗi đồng bộ hóa.

Mặc dù từ một khía cạnh khoa học máy tính thì nó khá phức tạp, tuy nhiên quy tắc sử dụng các 
phương thức này thực sự rất đơn giản:

• phương thức wait () báo cho luồng gọi để nhường quyền điều khiển và đi vào chế độ ngủ cho 
đến khi một luồng khác đi vào cùng một điều khiển và gọi phương thức notify () hoặc notifyAll ().

• phương thức notify () đánh thức một luồng đã gọi phương thức wait () trên cùng một đối tượng.

• phương thức notifyAll () đánh thức tất cả các luồng đã gọi phương thức wait () trên cùng một 
đối tượng. Một trong các luồng sẽ được cấp quyền truy cập.