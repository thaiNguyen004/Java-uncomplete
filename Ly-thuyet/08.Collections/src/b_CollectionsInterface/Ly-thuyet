• Collections Framework định nghĩa một số giao diện cốt lõi. Phần này cung cấp một tổng quan về mỗi giao diện. 
Bắt đầu với các giao diện collection là cần thiết vì chúng xác định bản chất cơ bản của các lớp collection. 
Nói cách khác, các lớp cụ thể chỉ đơn giản cung cấp các triển khai khác nhau của các giao diện tiêu chuẩn. 
Các giao diện là nền tảng của các collection được tóm tắt sau :

1. Collection: Đây là giao diện cơ bản nhất trong Collections Framework. Nó đại diện cho một nhóm 
các đối tượng, cung cấp các phương thức để thêm, xóa, truy xuất và duyệt các phần tử trong nhóm.

2. List: Giao diện này mở rộng giao diện Collection và đại diện cho một danh sách tuần tự các phần tử. 
Các phần tử có thể được truy cập bằng chỉ mục và có thể chứa các phần tử trùng lặp.

3. Set: Giao diện này mở rộng giao diện Collection và đại diện cho một tập hợp các phần tử duy nhất, 
không chứa các phần tử trùng lặp.

4. Queue: Giao diện này mở rộng giao diện Collection và đại diện cho một hàng đợi các phần tử, 
trong đó phần tử mới được thêm vào cuối hàng đợi và phần tử cũ được lấy ra từ đầu hàng đợi.

5. Deque: Giao diện này mở rộng giao diện Queue và đại diện cho một hàng đợi hai đầu, trong đó 
phần tử mới có thể được thêm vào cả đầu và cuối hàng đợi, và phần tử cũ có thể được lấy ra từ cả hai đầu.

6. Map: Giao diện này đại diện cho một bản đồ key-value, trong đó các phần tử được lưu trữ dưới dạng 
cặp key-value. Mỗi key là duy nhất và được sử dụng để truy cập và tìm kiếm các phần tử tương ứng.

• Ngoài các giao diện collection, các collection còn sử dụng các giao diện Comparator, RandomAccess, Iterator, 
ListIterator và Spliterator, được mô tả chi tiết sau trong chương này. Comparator xác định cách so sánh hai đối tượng; 
Iterator, ListIterator và Spliterator định rõ các đối tượng trong một collection. Bằng cách triển khai RandomAccess, 
một danh sách chỉ ra rằng nó hỗ trợ truy cập ngẫu nhiên hiệu quả đến các phần tử của nó.
Để cung cấp sự linh hoạt tối đa trong việc sử dụng, các giao diện collection cho phép một số phương thức là tùy chọn. 
• Các phương thức tùy chọn cho phép bạn thay đổi nội dung của một collection. Các collection hỗ trợ các phương thức này 
được gọi là modifiable (có thể thay đổi). Các collection không cho phép nội dung của chúng được thay đổi được gọi 
là unmodifiable (không thể thay đổi). Nếu cố gắng sử dụng một trong các phương thức này trên một collection unmodifiable, 
một UnsupportedOperationException sẽ được ném ra. Tất cả các collection tích hợp sẵn đều có thể thay đổi.
Các phần sau xem xét các giao diện collection.

